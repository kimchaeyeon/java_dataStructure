제 4장 연결 리스트(Linked List)

4.1 연결 리스트의 개념과 기본 연산

< 리스트 >
- 리스트(list)
     기본적인 연산: 삽입(Insert), 삭제(remove), 검색(search) 등
     리스트를 구현하는 대표적인 두 가지 방법: 배열, 연결리스트
- 배열의 단점
     크기가 고정 - reallocation이 필요
     리스트의 중간에 원소를 삽입하거나 삭제할 경우 다수의 데이터를 옮겨야
- 연결리스트
     다른 데이터의 이동없이 중간에 삽입이나 삭제가 아능하며, 길이의 제한이 없음
  but, 랜덤 엑세스가 불가능
< 노드 >
- 각각의 노드는 "데이터 필드"와 하나 혹은 그 이상의 "링크 필드"로 구성
- 링크 필드는 다음 노드를 참조
- 첫 번째 노드의 주소는 따로 저장해야 (head)
(한 노드안에 꼭 한 데이터를 넣을 필요는 없지만 여러개 데이터 넣는 경우는 일반적이지 않음)
- 두개의 클래스를 만들어야 함.

4.2 예제: 다항식 프로그램
 - 프로그램 실행 예
 $ create f      // 다항함수 f=0을 정의한다.
 $ add f 2 3     // f(x)에 2x^3을 더한다. 따라서 f(x)=2x^3 이된다.
 $ add f -1 1    // f(x) = 2x^3 - x 이 된다.
 $ add f 5 0     // f(x) = 2x^3 - x + 5 이 된다.
 $ add f 2 1     // f(x) = 2x^3 - x + 5 + 2x = 2x^3 + x + 5 이 된다.
 $ calc f 2      // x=2 일때 다항함수의 값, 즉 f(2) =23을 계산하여 출력한다.
 23
 $ print f       // 차수에 관한 내림차순으로 정렬하여 다음과 같이 출력한다.
 2X^3 + x + 5    // 동일한 차수의 항은 하나로 합쳐져야 한다.
 $ create g      // 다른 다항 함수 g를 정의한다.
 ....
 exit
 
 - 다항식의 표현
 연결리스트를 이용하여 하나의 다항식을 표현하는 클래스 polynomial을 작성한다.
 다항식을 항들의 연결리스트로 표현한다.
 항들을 차수에 대해서 내림차순으로 정렬하여 저장하며, 동일차수의 항을 2개 이상 가지지 않게 한다.
 또한 계수가 0인 항을 가지지 않게 한다.
 하나의 항은 계수와 지수에 의해 정의된다. 하나의 항을 표현하기 위해 클래스 Term을 정의한다.
 클래스 Polynomial은 다항식을 계산하는 메서드와 출력하는 메서드를 제공한다. 
 
4.3 연결리스트와 Iterator

<객체지향 프로그래밍>
- Information Hiding
- Data Encapsulation
- Abstract Data Type
     
 <인터페이스(Interface)와 구현(implementation)의 분리>
 - 연결리스트는 "리스트"라는 추상적인 데이터 타입을 구현하는 한 가지 방법일 뿐이다. 가령 배열 혹은 ArrayList는 또 다른 구현 방법의 예이다.
 - 사용자는 리스트에 데이터를 삽입,삭제,검색할 수 있으면 된다. 그것의 구현에 대해서 세부적으로 알 필요는 없다.
      사용자가 필요로 하는 이런 기능들을 public method들로 제공한다 .
      이 public method들은 가능한 한 내부 구현과 독립적이어야 한다.
 - 인터페이스와 구현을 분리하면 코드의 모듈성(modularity)가 증가하며, 코드의 유지/보수, 코드의 재사용이 용이해진다.
 
 <연결리스트의 순회: Iterator의 필요성>
 - class MySingleLinkedList의 외부에서 연결리스트를 순회하려면?
 - class MySingleLinkedList의 
 
 <Iterator>
 -노드의 주소를 직접 사용자에게 제공하는 대신 그것을 private 멤버로 wrapping하고 있으면서 사용자가 필요로 하는 일을
 ( 노드에 저장된 데이터를 액세스하거나 한 칸 전진하는 일 등) 해주는 public method를 가진 Iterator객체를 제공한다.
 
 하나의 Iterator객체를 반환한다
 현재 노드의 데이터를 반환하고 한 칸 전진한다.
 다음 노드가 존재하는지 검사한다.
 
 실제로 사용자는 주소 값 자체를 알아야하는 것이 아니라 그 주소가 가리키고 있는 노드의 데이터와, 그 노드를 한칸 앞으로 전진시켜야 하는
 기능이 필요한것이다.
 --> 주소 자체는 private이지만 대신 Iterator클래스의 next메소드 등을 public으로 생성하여
  데이터를 리턴해주면서 전진해주는 node메소드를 만든다
  public 타입의 검사 메소드 hasNext()를 생성. 
 
 MySingleLinkedList가 iterator(자바 API가 기본 제공하는 메소드이다)라는 public 메소드를 가지고 있다.