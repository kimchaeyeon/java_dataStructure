package section1;

public class MySingleLinkedList<T> { // 단방향 링크드리스트, 반대로 각각의 노드가 자기 이전,다음 노드의 주소를 동시에 가지는 구조의 연결리스트는 더블링크드리스트,
	
	public Node<T> head; // 첫번째 노드의 주소, T타입
	public int size;
	
	public MySingleLinkedList(){// 생성자
		head = null;
		size = 0;
	}
	public void addFisrt( T item ){ //새로운 노드 데이터를 연결리스트 맨 앞에 추가하는 메소드 
        //새로운 노드를 만들고 추가할 데이터를 저장
		Node<T> temp = new Node<T>(item); // 노드 클래스의 생성자가 매개변수를 하나 받아야 하기 떄문에 오류
		// T타입을 parameter로 가지는 다른 객체를 생성하는것은 가능,, T : type parameter 를 포함하는 새로운 객체를 생성할 때,
		//T타입의 객체를 생성할 순 없다. 실제 존재 클래스가 아니라 가상이기 때문에 , 그렇기 때문에 T타입 배열도 생성이 불가능
		// Node<T> [] arr = new Node<T>[100]; 도 불가능 
		temp.next = head;   //새로운 노드의 next필드가 현재의 head노드를 가리키도록
		head = temp;        //새로운 노드를 새로운 head노드로 한다. 
		size++;                
		// 기존의 리스트의 크기가 0인경우, 즉 head가 null인 경우도 문제가 없는지 확인해야한다
	} // 주의할 점! 일반적인 경우 말고도 특수,극단적인 경우에도 문제 없이 작동하는지 철저히 확인해야한다
	public void add( int index, T item )// insert  , arrayList메소드와 유사한 메소드들을 생성
	{
		
	}
	public void remove( int index ) // delete
	{
		
	}
	public T get(int index){
		
		return null;
	}
	public int indexOf( T item ) // search
	{
		return -1;
	}

	public static void main(String[] args) {
		MySingleLinkedList<String> list = new MySingleLinkedList<String>(); //String 타입 객체 생성
		
		list.add(0, "Saturday");
		list.add(1, "Friday");
		list.add(0, "Monday"); // M,S,F
		list.add(2, "Tuesday"); // M,S,T,F
		
		String str = list.get(2); //str = "Tuesday";
		list.remove(2);  //M,S,F
		int pos = list.indexOf("Friday"); // pos = 2

	}

}
