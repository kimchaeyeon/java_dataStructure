2장 클래스와 객체
<클래스>
- 한 사람의 "이름"과 "전화번호"는 항상 같이 붙어다녀야 하는 데이터이다.
- 이 두 가지 데이터를 서로 별개의 변수에 저장하면 우리가 이름 데이터를 옮길  때 마다 전화번호 데이터도 따로 옮겨줘야 한다.
- 만약 각 사람에 대해서 이름과 전화번호 뿐만 아니라 주소, 이메일 등 여러 가지 데이터를 저장한다면  이 불편은 더 심해질 것이다.
- 인덱스 메이커 프로그램에서도 "하나의 단어"와 그 단어의 "등장 횟수"는 항상 같이 붙어다녀야 하는 데이터이다.
- 이렇게 서로 관련있는 데이터들을 하나의 단위로 묶어두면 편할 것이다.
- 이것이 클래스라는 개념이 등장하는 가장 기본적인 이유이다.

- 클래스는 결국 하나의 "타입"이다, 마치 int,double등 처럼
- 다만 int,double처럼 Java가 미리 정해놓은 타입이 아니라 사용자가 정의한 새로운 타입이라는 의미에서 "사용자 정의 타입"
     이라고 부르기도 한다.
- int 혹은 double형 변수를 선언하고 사용하는 것처럼 Person1형 변수를 선언하고 사용한다.
  int count = 0;
  Person1 first = new Person1();
  
 <프리미티브 타입과 클래스: 차이점>
 - int 혹은 double 형 변수를 선언하고 사용하는 것처럼 Person1형 변수를 선언하고 사용한다.
   int count = 0;
   -> count라는 이름의 변수가 만들어지고 그 "안"에 정수값 0이 저장된다.
   Person1 first = new Person1();
   -> first라는 이름의 변수가 만들어지지만 그 "안"에 사람 이름과 전화번호가 저장되지는 않는다.
            이름과 전화번호를 저장할 "Person1 객체(object)"는 new 명령으로 따로 만들어야 하고
     first에는 그 객체의 주소(참조)를 저장할 수 있다.
 <클래스와 객체>
 
 Person1 first;
 - first 라는 이름의 변수만을 선언했다면 아직 객체는 생성되지 않고 변수 first만 만들어진다. 이때 이 변수의 값은 null   
 
 first = new Person1();
 - new Person1() 명령에 의해 "Person1 객체"가 만들어지고 first에 그 주소를 저장한다.
 
 first.name = "John"; first.number = "13123132";
 - first가 가리키고 있는 Person1 타입의 객체의 name과 number라는 이름의 필드에 각각 데이터를 저장한다.
 
 
 The rule is very simple.
 모든 프리미티브 타입의 변수는 보통 변수이다.
 즉 변수 자체에 값이 저장된다.
 프리미티브 타입이 아닌 모든 변수는 ""참조변수"" 이다.
 즉 실제 데이터가 저장될 "객체"는 new명령으로 따로 만들어야 하고, 참조변수에는 그 객체의 주소를 저장한다.   