package section3;


public class MySingleLinkedList<T> { // 단방향 링크드리스트, 반대로 각각의 노드가 자기 이전,다음 노드의 주소를 동시에 가지는 구조의 연결리스트는 더블링크드리스트,
	
	public Node<T> head; // 첫번째 노드의 주소, T타입
	public int size;
	
	public MySingleLinkedList(){// 생성자
		head = null;
		size = 0;
	}
	public class Node<T> { //임의의 가상 타입 T
		public T data; //T타입 데이터
		public Node<T> next;//T타입의 노드, 나하고 똑같은 타입을 참조할 수 있는 노드여야함
		
		public Node(T item){ //생성자 Node Node에 저장될 데이터를 받아 생성자를 만듬
			data = item;
			next = null;
		}
	public void addFirst( T item ){ //새로운 노드 데이터를 연결리스트 맨 앞에 추가하는 메소드 
        //새로운 노드를 만들고 추가할 데이터를 저장
		Node<T> temp = new Node<T>(item); // 노드 클래스의 생성자가 매개변수를 하나 받아야 하기 떄문에 오류
		// T타입을 parameter로 가지는 다른 객체를 생성하는것은 가능,, T : type parameter 를 포함하는 새로운 객체를 생성할 때,
		//T타입의 객체를 생성할 순 없다. 실제 존재 클래스가 아니라 가상이기 때문에 , 그렇기 때문에 T타입 배열도 생성이 불가능
		// Node<T> [] arr = new Node<T>[100]; 도 불가능 
		temp.next = head;   //새로운 노드의 next필드가 현재의 head노드를 가리키도록
		head = temp;        //새로운 노드를 새로운 head노드로 한다. 
		size++;                
		// 기존의 리스트의 크기가 0인경우, 즉 head가 null인 경우도 문제가 없는지 확인해야한다
	} // 주의할 점! 일반적인 경우 말고도 특수,극단적인 경우에도 문제 없이 작동하는지 철저히 확인해야한다
	public void addAfter( Node<T> before, T item){ // 한 노드의 주소를 받아서 before 가리키는 노드 뒤에 데이터를 끼워넣기
		Node<T> temp = new Node<T>( item );// 새로운 노드를 만들고 데이터를 저장
		temp.next = before.next;// 새로운 노드의 next필드의 before의 다음 노드를 가리키도록 
		before.next = temp;// 새로운 노드를 before의 다음 노드로 만든다
		size++;
		}
	
	// 단순 연결리스트에 새로운 노드를 삽입할 때 삽입할 위치의 바로 앞 노드의 주소가 필요하다. 
	// 즉 어떤 노드의 뒤에 삽입하는 것은 간단하지만, 반대로 어떤 노드의 앞에 삽입하는 것은 간단하지 않다.
	
	public T removeFirst(){ //연결리스트의 첫번째 노드를 삭제한다. remove된 데이터가 가지고 있는 타입을 리턴 타입으로 지정해줘야 하기 때문에 T타입으로 생성
		if (head == null)
			return null; 
		else {//head가 null 아니라면 head가 현재 head노드의 다음 노드를 가리키게 만든다.
			T temp = head.data;//T타입의 임시 변수를 만들어 head의 데이터를 temp에 저장한다.
			head= head.next;
			size--;
			return temp;
		}
	}
	public T removeAfter( Node<T> before ){ //before가 가리키는 노드의 다음 노드를 삭제한다. 
		if ( before.next == null)
			return null;
		else {  // before의 다음 노드가 null이 아니라면 before의 next필드가 현재 next노드의 다음 노드를 가리키게 만든다.
			T temp = before.next.data;
			before.next = before.next.next;
			size--;
			return temp;
			}
		}
	// 단순연결리스트에 어떤 노드를 삭제할 때는 삭제할 노드의 바로 앞 노드의 주소가 필요하다. 삭제할 노드의 주소만으로는 삭제할 수 없다.
	public void add( int index, T item )// insert , 연결리스트의 index번째 위치에 새로운 데이터를 삽입한다.
	{
		if( index < 0 || index > size )
			return;
		if( index == 0)
			addFirst( item );
		else{
			Node<T> q = getNode( index -1 );
			addAfter( q, item ); //index-1 뒤에 새로운 노드를 추가하는 것이기 때문에 이렇게 함수를 작성해도 됨 index가 0 일때는?
		}
	}
	public T remove( int index ) // delete , index번째 노드를 삭제하고 , 그 노드에 저장된 데이터를 반환한다
	{// 한 노드를 삭제하려면 그 이전노드의 주소를 알아야한다.
		if( index < 0 || index >= size )
			return null;
		if( index == 0 )
			return removeFirst();
		Node<T> prev = getNode( index-1 );
		return removeAfter( prev );
	}
	public T remove( T item ) { // 입력된 스트링을 저장한 노드를 찾아 삭제한다. 삭제한 노드에 저장된 스트링을 반환한다.
		// 삭제할 노드를 찾았음, 하지만 노드를 삭제하기 위해서는 삭제할 노드가 아니라 직전 노드의 주소가 필요함
		// 참조변수 두개를 쓰기!
		Node<T> p = head;
		Node<T> q = null; // q는 항상 p의 직전 노드를 가리킴
		while( p!= null && !p.data.equals(item)){
			q = p;
			p = p.next;
		}
		if (p==null)//찾고있는 노드가 존재하지 않는다는 뜻
			return null;
		if (q==null)
			return removeFirst();

		return removeAfter(q);
	}
	public Node<T> getNode( int index ){ // 연결리스트의 index번째 노드의 주소를 반환해주는 메소드
		if(index<0 || index >= size)
			return null;
		Node<T> p = head; // p가 첫번째 노드를 가리키도록
		for ( int i =0; i<index; i++)
			p = p.next;
		return p; 
		//index번째까지 순회하는 메소드
	}
	public T get(int index){ // index번째 노드에 저장된 데이터를 반환한다.
		if (index < 0 || index >= size)
			return null;  //index 유효성 체크
		return getNode(index).data; 
	
	}
	public int indexOf( T item ) // search ,연결리스트의 노드들을 처음부터 순서대로 방문하는 것을 순회(traverse)한다고 말한다.
	{// 이 메서든 입력된 데이터 item과 동일한 데이터를 저장한 노드를 찾아서 그 노드번호를(index)반환한다. 그것을 위해서 연결리스트를 순회한다.
		Node<T> p = head;// p라는 참조변수를 정의, 첫번째 노드를 가리키기
		int index = 0;
		while ( p != null ){
			if (p.data.equals(item)) //노드 p에 대해서 해야 할 일을 한다.
				return index;
			p=p.next;
			index++;
		} // while문을 빠져나가게 되면 값이 존재하지 않는 것이기 때문에 -1을 리턴해준다
		return -1;
	}
	

	public static void main(String[] args) {
		MySingleLinkedList<String> list = new MySingleLinkedList<String>(); //String 타입 객체 생성
		
		list.add(0, "Saturday");
		list.add(1, "Friday");
		list.add(0, "Monday"); // M,S,F
		list.add(2, "Tuesday"); // M,S,T,F
		
		String str = list.get(2); //str = "Tuesday";
		list.remove(2);  //M,S,F
		int pos = list.indexOf("Friday"); // pos = 2

	}

}
